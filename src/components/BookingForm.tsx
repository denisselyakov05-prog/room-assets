import React, { useState } from 'react';
import type { Booking, Room, Asset } from '../types';
import { hasTimeConflict } from '../utils/dateUtils';
import './BookingForm.css';

interface BookingFormProps {
  booking?: Booking | null;
  rooms: Room[];
  assets: Asset[];
  existingBookings: Booking[];
  onSave: (booking: Booking) => void;
  onCancel: () => void;
}

export const BookingForm: React.FC<BookingFormProps> = ({
  booking,
  rooms,
  assets,
  existingBookings,
  onSave,
  onCancel
}) => {
  const [formData, setFormData] = useState({
    title: booking?.title || '',
    resourceType: booking?.resourceType || 'room',
    resourceId: booking?.resourceId || '',
    start: booking?.start ? booking.start.slice(0, 16) : '',
    end: booking?.end ? booking.end.slice(0, 16) : '',
    notes: booking?.notes || ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  const availableResources = formData.resourceType === 'room' ? rooms : assets;

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è';
    }

    if (!formData.resourceId) {
      newErrors.resourceId = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å';
    }

    if (!formData.start) {
      newErrors.start = '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞';
    }

    if (!formData.end) {
      newErrors.end = '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è';
    }

    if (formData.start && formData.end && new Date(formData.start) >= new Date(formData.end)) {
      newErrors.end = '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞';
    }

    if (formData.resourceId && formData.start && formData.end) {
      const hasConflict = hasTimeConflict(
        existingBookings,
        formData.resourceId,
        formData.start,
        formData.end,
        booking?.id
      );

      if (hasConflict) {
        newErrors.time = '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±—Ä–æ–Ω—å—é';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      const bookingData: Booking = {
        id: booking?.id || `b-${Date.now()}`,
        resourceType: formData.resourceType as 'room' | 'asset',
        resourceId: formData.resourceId,
        title: formData.title,
        start: new Date(formData.start).toISOString(),
        end: new Date(formData.end).toISOString(),
        notes: formData.notes
      };

      onSave(bookingData);
    }
  };

  const selectedResource = availableResources.find(r => r.id === formData.resourceId);

  return (
    <div className="booking-form-container">
      <div className="form-header">
        <h2>{booking ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏' : '‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏'}</h2>
        <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏</p>
      </div>

      <form onSubmit={handleSubmit} className="booking-form">
        <div className="form-group">
          <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è *</label>
          <input
            type="text"
            id="title"
            value={formData.title}
            onChange={(e) => setFormData({ ...formData, title: e.target.value })}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ–º–∏–Ω–∞—Ä –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
            className={errors.title ? 'error' : ''}
          />
          {errors.title && <span className="error-text">{errors.title}</span>}
        </div>

        <div className="form-group">
          <label>–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ *</label>
          <div className="radio-group">
            <label className="radio-label">
              <input
                type="radio"
                value="room"
                checked={formData.resourceType === 'room'}
                onChange={(e) => setFormData({ ...formData, resourceType: e.target.value as 'room', resourceId: '' })}
              />
              üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è
            </label>
            <label className="radio-label">
              <input
                type="radio"
                value="asset"
                checked={formData.resourceType === 'asset'}
                onChange={(e) => setFormData({ ...formData, resourceType: e.target.value as 'asset', resourceId: '' })}
              />
              üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            </label>
          </div>
        </div>

        <div className="form-group">
          <label htmlFor="resourceId">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å *</label>
          <select
            id="resourceId"
            value={formData.resourceId}
            onChange={(e) => setFormData({ ...formData, resourceId: e.target.value })}
            className={errors.resourceId ? 'error' : ''}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ {formData.resourceType === 'room' ? '–∞—É–¥–∏—Ç–æ—Ä–∏—é' : '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'}</option>
            {availableResources.map(resource => (
              <option key={resource.id} value={resource.id}>
                {formData.resourceType === 'room' 
                  ? `${(resource as Room).name} (${(resource as Room).capacity} —á–µ–ª.)`
                  : `${(resource as Asset).name} - ${(resource as Asset).inventoryCode}`
                }
              </option>
            ))}
          </select>
          {errors.resourceId && <span className="error-text">{errors.resourceId}</span>}
        </div>

        {selectedResource && (
          <div className="resource-info">
            <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–µ:</h4>
            <div className="resource-details">
              {formData.resourceType === 'room' ? (
                <>
                  <div><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {(selectedResource as Room).name}</div>
                  <div><strong>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</strong> {(selectedResource as Room).capacity} —á–µ–ª–æ–≤–µ–∫</div>
                  {(selectedResource as Room).features.length > 0 && (
                    <div><strong>–û—Å–Ω–∞—â–µ–Ω–∏–µ:</strong> {(selectedResource as Room).features.join(', ')}</div>
                  )}
                </>
              ) : (
                <>
                  <div><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {(selectedResource as Asset).name}</div>
                  <div><strong>–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä:</strong> {(selectedResource as Asset).inventoryCode}</div>
                  <div><strong>–°—Ç–∞—Ç—É—Å:</strong> {(selectedResource as Asset).status === 'available' ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ó–∞–Ω—è—Ç'}</div>
                </>
              )}
            </div>
          </div>
        )}

        <div className="form-row">
          <div className="form-group">
            <label htmlFor="start">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ *</label>
            <input
              type="datetime-local"
              id="start"
              value={formData.start}
              onChange={(e) => setFormData({ ...formData, start: e.target.value })}
              className={errors.start ? 'error' : ''}
            />
            {errors.start && <span className="error-text">{errors.start}</span>}
          </div>

          <div className="form-group">
            <label htmlFor="end">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è *</label>
            <input
              type="datetime-local"
              id="end"
              value={formData.end}
              onChange={(e) => setFormData({ ...formData, end: e.target.value })}
              className={errors.end ? 'error' : ''}
            />
            {errors.end && <span className="error-text">{errors.end}</span>}
          </div>
        </div>

        {errors.time && (
          <div className="time-conflict-warning">
            ‚ö†Ô∏è {errors.time}
          </div>
        )}

        <div className="form-group">
          <label htmlFor="notes">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏</label>
          <textarea
            id="notes"
            value={formData.notes}
            onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏..."
            rows={3}
          />
        </div>

        <div className="form-actions">
          <button type="button" className="btn-cancel" onClick={onCancel}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button type="submit" className="btn-save">
            {booking ? '–û–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω—å' : '–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å'}
          </button>
        </div>
      </form>
    </div>
  );
};